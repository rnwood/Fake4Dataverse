syntax = "proto3";

option csharp_namespace = "Fake4Dataverse.Service.Grpc";

package organizationservice;

// The OrganizationService provides CRUD and Execute operations for Dataverse entities
service OrganizationService {
  // Creates a new entity record
  rpc Create (CreateRequest) returns (CreateResponse);
  
  // Retrieves an entity record by ID
  rpc Retrieve (RetrieveRequest) returns (RetrieveResponse);
  
  // Updates an entity record
  rpc Update (UpdateRequest) returns (UpdateResponse);
  
  // Deletes an entity record
  rpc Delete (DeleteRequest) returns (DeleteResponse);
  
  // Associates two entity records
  rpc Associate (AssociateRequest) returns (AssociateResponse);
  
  // Disassociates two entity records
  rpc Disassociate (DisassociateRequest) returns (DisassociateResponse);
  
  // Retrieves multiple entity records
  rpc RetrieveMultiple (RetrieveMultipleRequest) returns (RetrieveMultipleResponse);
  
  // Executes an organization request
  rpc Execute (ExecuteRequest) returns (ExecuteResponse);
}

// Request to create an entity
message CreateRequest {
  string entity_logical_name = 1;
  map<string, AttributeValue> attributes = 2;
}

// Response from creating an entity
message CreateResponse {
  string id = 1;
}

// Request to retrieve an entity
message RetrieveRequest {
  string entity_logical_name = 1;
  string id = 2;
  repeated string columns = 3;
}

// Response from retrieving an entity
message RetrieveResponse {
  EntityRecord entity = 1;
}

// Request to update an entity
message UpdateRequest {
  string entity_logical_name = 1;
  string id = 2;
  map<string, AttributeValue> attributes = 3;
}

// Response from updating an entity
message UpdateResponse {
  // Empty response
}

// Request to delete an entity
message DeleteRequest {
  string entity_logical_name = 1;
  string id = 2;
}

// Response from deleting an entity
message DeleteResponse {
  // Empty response
}

// Request to associate entities
message AssociateRequest {
  string entity_logical_name = 1;
  string entity_id = 2;
  string relationship_name = 3;
  repeated EntityReference related_entities = 4;
}

// Response from associating entities
message AssociateResponse {
  // Empty response
}

// Request to disassociate entities
message DisassociateRequest {
  string entity_logical_name = 1;
  string entity_id = 2;
  string relationship_name = 3;
  repeated EntityReference related_entities = 4;
}

// Response from disassociating entities
message DisassociateResponse {
  // Empty response
}

// Request to retrieve multiple entities
message RetrieveMultipleRequest {
  string query_type = 1; // "QueryExpression", "FetchXml", or "QueryByAttribute"
  string query_data = 2; // JSON or XML representation of the query
}

// Response from retrieving multiple entities
message RetrieveMultipleResponse {
  repeated EntityRecord entities = 1;
  bool more_records = 2;
  string paging_cookie = 3;
}

// Request to execute an organization request
message ExecuteRequest {
  string request_type = 1;
  map<string, AttributeValue> parameters = 2;
}

// Response from executing an organization request
message ExecuteResponse {
  map<string, AttributeValue> results = 1;
}

// Represents an entity record
message EntityRecord {
  string logical_name = 1;
  string id = 2;
  map<string, AttributeValue> attributes = 3;
}

// Represents an entity reference
message EntityReference {
  string logical_name = 1;
  string id = 2;
  string name = 3;
}

// Represents an attribute value with different types
message AttributeValue {
  oneof value {
    string string_value = 1;
    int32 int_value = 2;
    int64 long_value = 3;
    double double_value = 4;
    bool bool_value = 5;
    string datetime_value = 6; // ISO 8601 format
    string guid_value = 7;
    EntityReference reference_value = 8;
    OptionSetValue optionset_value = 9;
    Money money_value = 10;
    bytes binary_value = 11;
  }
}

// Represents an option set value
message OptionSetValue {
  int32 value = 1;
}

// Represents a money value
message Money {
  double value = 1;
}
