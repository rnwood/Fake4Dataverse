using System;
using System.Collections.Generic;
using System.Linq;

namespace Fake4Dataverse.BusinessRules
{
    /// <summary>
    /// Represents the result of executing a business rule, including any errors, recommendations, and actions taken.
    /// 
    /// Reference: https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-create-business-rule
    /// "Business rules can generate errors that prevent saving, recommendations that guide users,
    /// and actions that modify field values and form behavior."
    /// 
    /// This class tracks all outcomes from business rule execution, allowing tests to verify
    /// that rules executed correctly and appropriate actions were taken.
    /// </summary>
    public class BusinessRuleExecutionResult
    {
        private readonly List<BusinessRuleError> _errors;
        private readonly List<BusinessRuleRecommendation> _recommendations;
        private readonly List<string> _executedActions;
        private readonly List<BusinessRuleAction> _formActions;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessRuleExecutionResult"/> class.
        /// </summary>
        public BusinessRuleExecutionResult()
        {
            _errors = new List<BusinessRuleError>();
            _recommendations = new List<BusinessRuleRecommendation>();
            _executedActions = new List<string>();
            _formActions = new List<BusinessRuleAction>();
        }
        
        /// <summary>
        /// Gets whether the business rule execution passed without errors.
        /// 
        /// Reference: https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-create-business-rule#validation
        /// "Error messages prevent the record from being saved until the error is resolved"
        /// 
        /// If HasErrors is true, the save operation should be blocked.
        /// </summary>
        public bool IsValid => !_errors.Any();
        
        /// <summary>
        /// Gets whether any errors were generated during execution.
        /// </summary>
        public bool HasErrors => _errors.Any();
        
        /// <summary>
        /// Gets whether any recommendations were generated during execution.
        /// 
        /// Reference: https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-create-business-rule#recommendations
        /// "Recommendations guide users but don't prevent saving"
        /// </summary>
        public bool HasRecommendations => _recommendations.Any();
        
        /// <summary>
        /// Gets the list of errors generated by business rules.
        /// </summary>
        public IReadOnlyList<BusinessRuleError> Errors => _errors.AsReadOnly();
        
        /// <summary>
        /// Gets the list of recommendations generated by business rules.
        /// </summary>
        public IReadOnlyList<BusinessRuleRecommendation> Recommendations => _recommendations.AsReadOnly();
        
        /// <summary>
        /// Gets the list of actions that were executed (for server-side actions).
        /// </summary>
        public IReadOnlyList<string> ExecutedActions => _executedActions.AsReadOnly();
        
        /// <summary>
        /// Gets the list of form-level actions that should be applied client-side.
        /// These include show/hide, enable/disable, lock/unlock, and set business required actions.
        /// </summary>
        public IReadOnlyList<BusinessRuleAction> FormActions => _formActions.AsReadOnly();
        
        /// <summary>
        /// Adds an error to the result.
        /// Errors prevent the record from being saved.
        /// 
        /// Reference: https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-create-business-rule#error-handling
        /// "Error messages are displayed to the user and prevent the form from being saved"
        /// </summary>
        /// <param name="fieldName">The field the error is associated with</param>
        /// <param name="message">The error message</param>
        public void AddError(string fieldName, string message)
        {
            _errors.Add(new BusinessRuleError
            {
                FieldName = fieldName,
                Message = message
            });
        }
        
        /// <summary>
        /// Adds a recommendation to the result.
        /// Recommendations guide users but don't prevent saving.
        /// 
        /// Reference: https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-create-business-rule#recommendations
        /// "Recommendations provide guidance without blocking the user"
        /// </summary>
        /// <param name="fieldName">The field the recommendation is associated with</param>
        /// <param name="message">The recommendation message</param>
        public void AddRecommendation(string fieldName, string message)
        {
            _recommendations.Add(new BusinessRuleRecommendation
            {
                FieldName = fieldName,
                Message = message
            });
        }
        
        /// <summary>
        /// Records that an action was executed (for server-side actions).
        /// Used for testing and debugging.
        /// </summary>
        /// <param name="action">The action that was executed</param>
        /// <param name="description">Description of what was done</param>
        public void RecordAction(BusinessRuleAction action, string description)
        {
            _executedActions.Add(description);
        }
        
        /// <summary>
        /// Records a form-level action that should be processed client-side.
        /// These actions don't modify the entity directly but affect form behavior.
        /// </summary>
        /// <param name="action">The form action</param>
        public void RecordFormAction(BusinessRuleAction action)
        {
            _formActions.Add(action);
        }
        
        /// <summary>
        /// Gets a summary of all execution results as a string.
        /// Useful for debugging and logging.
        /// </summary>
        public string GetSummary()
        {
            var parts = new List<string>();
            
            if (HasErrors)
            {
                parts.Add($"Errors: {string.Join("; ", _errors.Select(e => $"{e.FieldName}: {e.Message}"))}");
            }
            
            if (HasRecommendations)
            {
                parts.Add($"Recommendations: {string.Join("; ", _recommendations.Select(r => $"{r.FieldName}: {r.Message}"))}");
            }
            
            if (_executedActions.Any())
            {
                parts.Add($"Actions: {string.Join("; ", _executedActions)}");
            }
            
            if (_formActions.Any())
            {
                parts.Add($"Form Actions: {_formActions.Count} action(s)");
            }
            
            return parts.Any() ? string.Join(Environment.NewLine, parts) : "No errors or actions";
        }
    }
    
    /// <summary>
    /// Represents a validation error from a business rule.
    /// 
    /// Reference: https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-create-business-rule#show-error-message
    /// "Error messages block saving and must be resolved before the record can be saved"
    /// </summary>
    public class BusinessRuleError
    {
        /// <summary>
        /// Gets or sets the field name associated with this error.
        /// Can be null for form-level errors.
        /// </summary>
        public string FieldName { get; set; }
        
        /// <summary>
        /// Gets or sets the error message text.
        /// </summary>
        public string Message { get; set; }
    }
    
    /// <summary>
    /// Represents a business recommendation from a business rule.
    /// 
    /// Reference: https://learn.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-create-business-rule#set-business-recommendation
    /// "Recommendations provide guidance to users without preventing them from saving"
    /// </summary>
    public class BusinessRuleRecommendation
    {
        /// <summary>
        /// Gets or sets the field name associated with this recommendation.
        /// Can be null for form-level recommendations.
        /// </summary>
        public string FieldName { get; set; }
        
        /// <summary>
        /// Gets or sets the recommendation message text.
        /// </summary>
        public string Message { get; set; }
    }
}
