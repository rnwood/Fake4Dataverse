name: Build and Publish

on:
  push:
    branches: [ main, master, dev ]
    tags:
      - '*'
  pull_request:
    branches: [ main, master, dev ]

env:
  dotnet-version: 8.0.x

jobs:
  build-and-publish:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.dotnet-version }}

    - name: Determine Version Suffix
      id: version
      shell: pwsh
      run: |
        $versionSuffix = ""
        $versionPrefix = ""
        $isRelease = $false
        $isPrereleaseTag = $false

        # Check if this is a tag push
        if ($env:GITHUB_REF -match '^refs/tags/(.+)$') {
          $tag = $Matches[1]
          Write-Host "Tag detected: $tag"

          # Check if tag matches semantic version pattern (with optional prerelease suffix)
          if ($tag -match '^(\d+\.\d+\.\d+)(-.*)?$') {
            $versionPrefix = $Matches[1]
            $prerelease = $Matches[2]

            if ($prerelease) {
              # Remove leading dash from prerelease suffix
              $versionSuffix = $prerelease.Substring(1)
              $isPrereleaseTag = $true
              Write-Host "Prerelease tag with version: $versionPrefix, suffix: $versionSuffix"
            } else {
              # No suffix for release versions
              $versionSuffix = ""
              $isRelease = $true
              Write-Host "Release tag with version: $versionPrefix"
            }
          } else {
            Write-Host "::error::Tag '$tag' does not match semantic versioning pattern X.Y.Z or X.Y.Z-prerelease"
            exit 1
          }
        }
        # Check if this is a PR build
        elseif ($env:GITHUB_EVENT_NAME -eq 'pull_request') {
          $prNumber = $env:GITHUB_REF -replace '^refs/pull/(\d+)/merge$', '$1'
          $date = Get-Date -Format "yyyyMMdd"
          $runNumber = $env:GITHUB_RUN_NUMBER
          # Use underscore instead of + for better compatibility
          $versionSuffix = "ci-$date-$runNumber-pr$prNumber"
          Write-Host "PR build with version suffix: $versionSuffix"
        }
        # Main/master branch build
        else {
          $date = Get-Date -Format "yyyyMMdd"
          $runNumber = $env:GITHUB_RUN_NUMBER
          $versionSuffix = "ci-$date-$runNumber"
          Write-Host "Main branch build with version suffix: $versionSuffix"
        }

        # Output to GitHub Actions
        "version_suffix=$versionSuffix" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "version_prefix=$versionPrefix" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "is_release=$isRelease" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "is_prerelease=$(if ($isPrereleaseTag -or $versionSuffix) { 'true' } else { 'false' })" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

        Write-Host "Version prefix: $versionPrefix"
        Write-Host "Version suffix: $versionSuffix"
        Write-Host "Is release: $isRelease"
        Write-Host "Is prerelease: $(if ($isPrereleaseTag -or $versionSuffix) { 'true' } else { 'false' })"

    - name: Restore
      run: dotnet restore Fake4Dataverse.sln

    - name: Build
      run: dotnet build Fake4Dataverse.sln --configuration Debug --no-restore

    - name: Test net8.0
      run: dotnet test Fake4Dataverse.sln --configuration Debug --framework net8.0 --no-build --verbosity normal

    - name: Test net462
      run: |
        # Skip Service and CloudFlows tests on net462 since they only target net8.0
        dotnet test Fake4DataverseAbstractions/Fake4Dataverse.Abstractions.Tests/Fake4Dataverse.Abstractions.Tests.csproj --configuration Debug --framework net462 --no-build --verbosity normal
        dotnet test Fake4DataverseCore/Fake4Dataverse.Core.Tests/Fake4Dataverse.Core.Tests.csproj --configuration Debug --framework net462 --no-build --verbosity normal
        dotnet test Fake4Dataverse/Fake4Dataverse.Tests/Fake4Dataverse.Tests.csproj --configuration Debug --framework net462 --no-build --verbosity normal

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: Fake4DataverseService/Fake4Dataverse.Service/mda-app/package-lock.json
    
    - name: Install Node dependencies
      working-directory: Fake4DataverseService/Fake4Dataverse.Service/mda-app
      run: npm ci
    
    - name: Run MDA unit tests
      working-directory: Fake4DataverseService/Fake4Dataverse.Service/mda-app
      run: npm test -- --ci --coverage --maxWorkers=2
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: ./Fake4DataverseService/Fake4Dataverse.Service/mda-app/coverage/lcov.info
        flags: mda-unit-tests
        name: mda-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
    
    - name: Build Next.js app
      working-directory: Fake4DataverseService/Fake4Dataverse.Service/mda-app
      run: npm run build
    
    - name: Install Playwright browsers
      working-directory: Fake4DataverseService/Fake4Dataverse.Service/mda-app
      run: npx playwright install --with-deps chromium
    
    - name: Run E2E tests with Playwright
      working-directory: Fake4DataverseService/Fake4Dataverse.Service/mda-app
      run: npm run test:e2e
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: Fake4DataverseService/Fake4Dataverse.Service/mda-app/playwright-report/
        retention-days: 30
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mda-test-results
        path: Fake4DataverseService/Fake4Dataverse.Service/mda-app/test-results/
        retention-days: 30

    - name: Pack Fake4Dataverse.Abstractions
      shell: pwsh
      run: |
        $versionSuffix = "${{ steps.version.outputs.version_suffix }}"
        $versionPrefix = "${{ steps.version.outputs.version_prefix }}"
        Write-Host "Packing Fake4Dataverse.Abstractions"
        Write-Host "  Version prefix: $versionPrefix"
        Write-Host "  Version suffix: $versionSuffix"

        $packArgs = @(
          'Fake4DataverseAbstractions/Fake4Dataverse.Abstractions/Fake4Dataverse.Abstractions.csproj',
          '--configuration', 'Debug',
          '--no-build',
          '--output', './nupkgs'
        )

        if ($versionPrefix) {
          $packArgs += '/p:VersionPrefix=' + $versionPrefix
        }

        if ($versionSuffix) {
          $packArgs += '--version-suffix'
          $packArgs += $versionSuffix
        }

        & dotnet pack $packArgs

    - name: Pack Fake4Dataverse.Core
      shell: pwsh
      run: |
        $versionSuffix = "${{ steps.version.outputs.version_suffix }}"
        $versionPrefix = "${{ steps.version.outputs.version_prefix }}"
        Write-Host "Packing Fake4Dataverse.Core"
        Write-Host "  Version prefix: $versionPrefix"
        Write-Host "  Version suffix: $versionSuffix"

        $packArgs = @(
          'Fake4DataverseCore/Fake4Dataverse.Core/Fake4Dataverse.Core.csproj',
          '--configuration', 'Debug',
          '--no-build',
          '--output', './nupkgs'
        )

        if ($versionPrefix) {
          $packArgs += '/p:VersionPrefix=' + $versionPrefix
        }

        if ($versionSuffix) {
          $packArgs += '--version-suffix'
          $packArgs += $versionSuffix
        }

        & dotnet pack $packArgs

    - name: Pack Fake4Dataverse
      shell: pwsh
      run: |
        $versionSuffix = "${{ steps.version.outputs.version_suffix }}"
        $versionPrefix = "${{ steps.version.outputs.version_prefix }}"
        Write-Host "Packing Fake4Dataverse"
        Write-Host "  Version prefix: $versionPrefix"
        Write-Host "  Version suffix: $versionSuffix"

        $packArgs = @(
          'Fake4Dataverse/Fake4Dataverse/Fake4Dataverse.csproj',
          '--configuration', 'Debug',
          '--no-build',
          '--output', './nupkgs'
        )

        if ($versionPrefix) {
          $packArgs += '/p:VersionPrefix=' + $versionPrefix
        }

        if ($versionSuffix) {
          $packArgs += '--version-suffix'
          $packArgs += $versionSuffix
        }

        & dotnet pack $packArgs

    - name: Pack Fake4DataverseService (dotnet tool)
      shell: pwsh
      run: |
        $versionSuffix = "${{ steps.version.outputs.version_suffix }}"
        $versionPrefix = "${{ steps.version.outputs.version_prefix }}"
        Write-Host "Packing Fake4DataverseService as dotnet tool"
        Write-Host "  Version prefix: $versionPrefix"
        Write-Host "  Version suffix: $versionSuffix"

        $packArgs = @(
          'Fake4DataverseService/Fake4Dataverse.Service/Fake4Dataverse.Service.csproj',
          '--configuration', 'Debug',
          '--no-build',
          '--output', './nupkgs'
        )

        if ($versionPrefix) {
          $packArgs += '/p:VersionPrefix=' + $versionPrefix
        }

        if ($versionSuffix) {
          $packArgs += '--version-suffix'
          $packArgs += $versionSuffix
        }

        & dotnet pack $packArgs

    - name: Upload NuGet Packages as Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkgs/*.nupkg

    - name: Publish to NuGet
      if: github.event_name != 'pull_request'
      shell: pwsh
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        $packages = Get-ChildItem ./nupkgs/*.nupkg
        foreach ($package in $packages) {
          Write-Host "Publishing $($package.Name) to NuGet..."
          dotnet nuget push $package.FullName `
            --source https://api.nuget.org/v3/index.json `
            --skip-duplicate
        }

    - name: Generate Release Notes
      if: github.event_name != 'pull_request'
      id: release_notes
      shell: pwsh
      run: |
        $notes = @"
        ## NuGet Packages

        This release includes the following packages:

        "@

        $packages = Get-ChildItem ./nupkgs/*.nupkg
        foreach ($package in $packages) {
          $notes += "- $($package.Name)`n"
        }

        $notes += @"

        ## Installation

        Install via NuGet Package Manager or .NET CLI:

        ``````
        dotnet add package Fake4Dataverse.Abstractions
        dotnet add package Fake4Dataverse.Core
        dotnet add package Fake4Dataverse
        ``````

        Install the Service as a global dotnet tool:

        ``````
        dotnet tool install --global Fake4DataverseService
        fake4dataverse start --port 5000
        ``````

        "@

        # Save to file for GitHub Release
        $notes | Out-File -FilePath release-notes.txt

        # Also output for use in next step (escape for GitHub Actions)
        $escapedNotes = $notes -replace '%','%25' -replace '\n','%0A' -replace '\r','%0D'
        "notes=$escapedNotes" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Determine Release Tag
      if: github.event_name != 'pull_request'
      id: release_tag
      shell: pwsh
      run: |
        if ($env:GITHUB_REF -match '^refs/tags/') {
          # Use the existing tag
          $tag = $env:GITHUB_REF_NAME
          Write-Host "Using existing tag: $tag"
        } else {
          # Create a tag name for CI builds
          $versionSuffix = "${{ steps.version.outputs.version_suffix }}"
          $tag = "v4.0.0-$versionSuffix"
          Write-Host "Creating CI tag: $tag"
        }
        "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Create GitHub Release
      if: github.event_name != 'pull_request'
      uses: softprops/action-gh-release@v1
      with:
        files: ./nupkgs/*.nupkg
        body_path: release-notes.txt
        prerelease: ${{ steps.version.outputs.is_prerelease }}
        tag_name: ${{ steps.release_tag.outputs.tag }}
        generate_release_notes: true
        draft: false
        make_latest: ${{ steps.version.outputs.is_release }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

